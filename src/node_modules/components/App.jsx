import React from 'react'
import 'typeface-roboto'
import { withStyles } from '@material-ui/core/styles'
import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'
import _ from 'lodash'
import {object} from 'prop-types'
import ReactCSSTransitionGroup from 'react-addons-css-transition-group'

import grey from '@material-ui/core/colors/grey'
import CssBaseline from '@material-ui/core/CssBaseline'

import Row from 'components/Row'
import rowTypes from 'components/rows'
import AppendRow from 'components/AppendRow'

import fake from 'components/fake'

class App extends React.Component {
    static propTypes = {
        classes: object.isRequired,
    }

    state = {
        mode: 'edit',
        isShowTools: false,
        rows: fake,
    }

    showToolsHandler = val => {
        this.setState({isShowTools: val})
    }

    addRow = ({type, id}) => {
        const {rows} = this.state
        const prevRowId = id
        
        const prevRowIndex = _.findIndex(rows, row => {
            return row.id === prevRowId
        })
        
        const prevRows = _.take(rows, prevRowIndex + 1)                
        const nextRows = _.difference(rows, prevRows)
        prevRows.push({
            id: Math.random(),
            type: type,
            elements: []
        })
        const resultRows = _.concat(prevRows, nextRows)            
        this.setState({
            isShowTools: false,
            rows: resultRows,
        })
        
    }

    deleteRow = id => {
        const {rows} = this.state     
        const newRows = _.reject(rows, {id: id})        
        this.setState({rows: newRows})
    }

    addElement = ({element, row, rowPlace}) => {
        const {rows} = this.state    
        const currentRowIndex = _.findIndex(rows, item => {
            return item.id === row.id
        })        
        rows[currentRowIndex].elements[rowPlace] = element
        this.setState({rows}, () => {
            //console.log('ROWS', rows)
        })

    }

    deleteElement = ({element, row, rowPlace}) => {
        const {rows} = this.state
        const currentRowIndex = _.findIndex(rows, item => {
            return item.id === row.id
        })        
        rows[currentRowIndex].elements[rowPlace] = null
        this.setState({rows}, () => {
            console.log('ROWS', rows)
        })
    }
    
    render() {
        const {classes} = this.props
        const {
            mode, 
            rows, 
            isShowTools
        } = this.state
        
        return (
            <MuiThemeProvider theme={theme}>
                <CssBaseline/>
                <div className={classes.root}>
                    <ReactCSSTransitionGroup 
                        transitionName='animTranslateY'                        
                        transitionAppear={true}
                        transitionAppearTimeout={900}
                        transitionEnter={true}
                        transitionEnterTimeout={900}
                        transitionLeave={true}
                        transitionLeaveTimeout={900}
                    >
                        {
                            mode === 'edit' &&
                            <AppendRow 
                                showToolsHandler={this.showToolsHandler}
                                isShowTools={isShowTools}
                                addRowHandler={this.addRow}
                                id={Math.random()}
                            />
                        }
                        {                            
                            rows.map(row => {
                                let RowView = rowTypes[_.findIndex(rowTypes, rowType => {return rowType.type == row.type})]
                                switch(mode) {
                                    case 'edit':
                                        RowView = RowView.edit
                                        break
                                    case 'preview':
                                        RowView = RowView.preview
                                        break
                                }
                                return (
                                    <div key={row.id}>
                                        <Row 
                                            mode={mode}                                            
                                            id={row.id}
                                            isShowTools={isShowTools}
                                            showToolsHandler={this.showToolsHandler}                                            
                                            addHandler={this.addRow}
                                            deleteHandler={this.deleteRow}
                                        >
                                            <RowView 
                                                elements={row.elements} 
                                                row={row}
                                                deleteElementHandler={this.deleteElement}
                                                addElementHandler={this.addElement}
                                            />
                                        </Row>
                                        {
                                            mode === 'edit' &&
                                            <AppendRow 
                                                showToolsHandler={this.showToolsHandler}
                                                isShowTools={isShowTools}
                                                addRowHandler={this.addRow}
                                                id={row.id}
                                            />
                                        }
                                    </div>
                                )
                            })
                        }
                    </ReactCSSTransitionGroup>
                </div>
            </MuiThemeProvider>
        )        
    }
}

const styles = theme => ({
    root: {        
        //backgroundColor: theme.palette.background.paper,
        backgroundColor: grey[50],
        marginTop: 50,  //TODO mobile
    },
})

const theme = createMuiTheme({
    palette: {
        primary: grey,
        secondary: {
            main: grey[700],
        },
    },
})

export default withStyles(styles)(App)