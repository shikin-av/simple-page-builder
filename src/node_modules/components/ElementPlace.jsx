import React from 'react'
import _ from 'lodash'
import {object, func, number} from 'prop-types'

import elements from 'components/elements'
import DeleteButton from 'components/DeleteButton'

import AddIcon from '@material-ui/icons/Add'
import {withStyles} from '@material-ui/core/styles'
import Grid from '@material-ui/core/Grid'
import IconButton from '@material-ui/core/IconButton'
import Tooltip from '@material-ui/core/Tooltip'
import grey from '@material-ui/core/colors/grey'
//import green from '@material-ui/core/colors/green'

class ElementPlace extends React.Component {
    static propTypes = {
        element:              object,
        row:                  object.isRequired,
        deleteElementHandler: func.isRequired,
        addElementHandler:    func.isRequired,
        rowPlace:             number.isRequired,
    }
    
    state = {
        element:      null,
        showElements: false,
        mouseEnter:   false,
    }

    componentWillMount = () => {
        const {element} = this.props
        if(element){
            this.setState({
                element: elements[_.findIndex(elements, el => {return el.type === element.type})]
            })
        }
    }

    addElement = element => {     
        const {
            row, 
            rowPlace,
            addElementHandler,
        } = this.props   
        this.setState({element}, () => {
            addElementHandler({
                element,
                row,
                rowPlace
            })
        })        
    }

    deleteElement = element => {
        const {
            row, 
            rowPlace,
            deleteElementHandler,
        } = this.props

        this.setState({
            element: null,
            showElements: false,
        }, () => {
            console.log('ElementPlace delete', element)
            deleteElementHandler({
                element,
                row,
                rowPlace
            })
        })
    }

    render(){
        const {
            element: elementState, 
            showElements, 
            mouseEnter,
        } = this.state
        const {element: elementProps} = this.props
        const {classes, row} = this.props
        if(elementState){            
            return (
                <Grid item 
                    className={classes.root}
                    onMouseEnter={() => this.setState({mouseEnter: true})}
                    onMouseLeave={() => this.setState({mouseEnter: false})}
                    style={mouseEnter ? {
                        outline: `1px dashed ${grey[600]}`,
                        backgroundColor: '#F1F1F1',
                    } : null}
                >
                    {
                        mouseEnter &&
                        <DeleteButton
                            className={classes.delete}
                            deleteHandler={() => this.deleteElement(elementState)}
                            title='Удалить текстовый блок'
                        />
                    }                    
                    <elementState.edit 
                        element={elementProps || {id: Math.random()}}
                        row={row}                        
                    />
                </Grid>
            )
        } else {
            if(showElements){
                return (
                    <Grid item className={classes.root}>
                        <div className={classes.elements}>
                            {
                                elements.map(element => { 
                                    element.id = Math.random()                                   
                                    return (
                                        <Tooltip title={element.tooltip} key={element.type}>
                                            <IconButton                                         
                                                variant='outlined'
                                                onClick={() => this.addElement(element)}
                                            >
                                                <element.icon/>
                                            </IconButton>
                                        </Tooltip>
                                    )
                                })
                            }
                        </div>
                    </Grid>
                )
            } else {
                return (
                    <Grid item className={classes.root}>
                        <Tooltip title='Добавить элемент'>
                            <IconButton 
                                variant='outlined'
                                className={classes.add}
                                onClick={() => this.setState({showElements: true})}
                            >
                                <AddIcon/>
                            </IconButton>
                        </Tooltip>
                    </Grid>
                )
            }
        }
    }
}

const styles = theme => ({
    root: {
        //backgroundColor: theme.palette.background.paper,        
        minHeight: 50,
        margin: '0px 20px',
        height: '100%',
        /*'&:hover': {
            backgroundColor: 'beige',
        }*/
    },
    add: {
        display: 'block',
        margin: '0 auto',
        marginTop: 19,
        backgroundColor: theme.palette.background.paper,
        border: '1px solid',
        borderRadius: 4,
        width: 36,
        height: 36,
    },
    elements: {
        margin: '0 auto',
        display: 'table',
        marginTop: 19,
    },
    delete: {		
        width: 36,
        height: 36,        
        zIndex: 100,
        position: 'absolute',
    }
})

export default withStyles(styles)(ElementPlace)