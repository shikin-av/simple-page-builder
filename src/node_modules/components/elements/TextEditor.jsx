import React from 'react'
import {EditorState, convertToRaw, ContentState} from 'draft-js'
import {Editor} from 'react-draft-wysiwyg'
import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'
import draftToHtml from 'draftjs-to-html'
import htmlToDraft from 'html-to-draftjs'
import {object, func} from 'prop-types'

import {withStyles} from '@material-ui/core/styles'
import TextIcon from '@material-ui/icons/TextFields'
import grey from '@material-ui/core/colors/grey'
import green from '@material-ui/core/colors/green'

import Svg from 'svg/text.svg'

class TextEditor extends React.Component {
	static propTypes = {
		classes:       object.isRequired,
		row:           object,
	}

	state = {
		editorState: EditorState.createEmpty(),
		showToolbar: false,
		focus:       false,
	}

	options = {
		options: [
			'inline', 
			'blockType', 
			'fontSize', 
			'list', 
			'textAlign', 
			'colorPicker', 
			'link', 
			'image', 
			'history'
		],
		inline: {
			inDropdown: false,
			options: ['bold', 'italic', 'underline', 'strikethrough', 'monospace',]
		},
		blockType: {inDropdown: true},
		list: {inDropdown: true},
		textAlign: {inDropdown: true},
		link: {inDropdown: true},	
	}
	  
	componentWillMount = () => {
		const {content} = this.props		
		if(content){
			const blocksFromHtml = htmlToDraft(content)
			const {contentBlocks, entityMap} = blocksFromHtml
			const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap)
			this.setState({editorState: EditorState.createWithContent(contentState)})
		}
	}
	
	onEditorStateChange = editorState => {
	    this.setState({
			editorState,
	    })
	}

	deleteHandler = val => {
		console.log('text editor Delete', val)
	}

	render() {
		const {
			editorState, 
			showToolbar, 
			focus,
		} = this.state
		const {
			classes, 
			row,
			deleteHandler,
		} = this.props
		
	    return (
			<div>				
				<Editor
					editorState={editorState}					
					onEditorStateChange={this.onEditorStateChange}										
					onFocus={() => this.setState({
						showToolbar: true,
						focus:       true,
					})}
					onBlur={() => this.setState({
						showToolbar: false,
						focus:       false,
					})}
					toolbar={this.options}					
					wrapperClassName={classes.root}
					toolbarClassName={classes.toolbarFixed}
					toolbarStyle={showToolbar ? {display: 'flex'} : {display: 'none'}}
					wrapperStyle={
						focus ? 
						{
							border: `1px solid ${green[700]}`,
							borderRadius: 4,
							background: 'white',
						} 
						: {} 
					}
					placeholder='Текстовый блок'
				/>
				{/*<textarea
					disabled
					value={draftToHtml(convertToRaw(editorState.getCurrentContent()))}
				/>*/}
			</div>
	    )
  	}
}

const styles = theme => ({
	root: {
		//background: theme.palette.background.paper,
		//border: `1px solid ${grey[100]}`,
		//borderRadius: 4,
	},
	toolbar: {
		marginTop: '-20px',
		marginLeft: '-20px',
		marginBottom: '-10px',
		marginTop: '-16px',
	},
	toolbarFixed: {
		position: 'fixed',
		top: 0,
		left: 0,
		width: '100%',
		zIndex: 100,
	},
})

export const TextEditorWithStyles = withStyles(styles)(TextEditor)

export const Icon = props => (
	<TextIcon/>
)
